var _0xe6f6 = [
	'0f0e0d0c0b0a09080706050403020100',
	'parse',
	'Hex',
	'enc',
	'A796CFBC9D3F8893D76E6A2A1ECDDA58AAC855C6303BF543ED3A7B2964A2E18D9753BA14F146F4C43B540FAC5530503B16856C4A3ADE64DBA7B17A0557A8E120A8330DEB2380D34A41217CC58EF5F8EC96962CB6E5436B024FB9E12C86A9ECF8275B17AB2EF9D1B85F2F0E44A6740939D8726A647B744E78E25ADB74ED8FA08F',
	'10001',
	'1',
	'trim',
	'prototype',
	'function',
	'',
	'replace',
	'memoize',
	'getTime',
	'random',
	'floor',
	'multiply',
	'length',
	'toBigInteger',
	'getX',
	'substring',
	'getQ',
	'getCurve',
	'getA',
	'getB',
	'getG',
	'getY',
	'getN',
	'charCodeAt',
	'push',
	'join',
	'slice',
	'0',
	'from',
	'init',
	'secp128r1',
	'fromBigInteger',
	'subtract',
	'bitLength',
	'add',
	'mod',
	'substr',
	'exportKey',
	'encryptToMF',
	'encryptToApp',
	'encryptToDLB',
	'04',
	'infinity',
	'Latin1',
	'Pkcs7',
	'pad',
	'CBC',
	'mode',
	'encrypt',
	'AES',
	'\\',
	'stringify',
	'Base64',
	'setPublic',
	'fromCharCode',
	'decryptFromApp',
	'create',
	'CipherParams',
	'lib',
	'decrypt',
	'decryptFromMF',
	'encryptHashPassword',
	'password is empty',
	'salt is empty',
	'toUpperCase',
	'01',
	'sign',
	'getVersion',
	'8.2',
	'DLECC'
];
var DLECC = function () {
	var _0xaab0x2;
	var _0xaab0x3;
	var _0xaab0x4;
	var _0xaab0x5;
	var _0xaab0x6;
	var _0xaab0x7;
	var _0xaab0x8;
	var _0xaab0x9 = CryptoJS.enc.Hex.parse('0f0e0d0c0b0a09080706050403020100');
	var _0xaab0xa = 'A796CFBC9D3F8893D76E6A2A1ECDDA58AAC855C6303BF543ED3A7B2964A2E18D9753BA14F146F4C43B540FAC5530503B16856C4A3ADE64DBA7B17A0557A8E120A8330DEB2380D34A41217CC58EF5F8EC96962CB6E5436B024FB9E12C86A9ECF8275B17AB2EF9D1B85F2F0E44A6740939D8726A647B744E78E25ADB74ED8FA08F';
	var _0xaab0xb = '10001';
	var _0xaab0xc = '1';
	if (typeof String.prototype.trim !== function) {
		String.prototype.trim = function () {
			return this.replace(/^\s+|\s+$/g, '')
		}
	}
	;
	Function.prototype.memoize = function () {
		var _0xaab0xd = this, _0xaab0xe = {};
		return function (_0xaab0xf) {
			if (_0xaab0xf in _0xaab0xe) {
				return _0xaab0xe[_0xaab0xf]
			} else {
				return _0xaab0xe[_0xaab0xf] = _0xaab0xd(_0xaab0xf)
			}
		}
	};
	function _0xaab0x10() {
		
		var _0xaab0x11 = new Date().getTime();
		var _0xaab0x12 = Math.floor(Math.random() * 100000000000 + 1);
		var _0xaab0x13 = Math.floor(Math.random() * 100000000000 + 1);
		var _0xaab0x14 = new BigInteger(_0xaab0x12.toString(10));
		var _0xaab0x15 = new BigInteger(_0xaab0x13.toString(10));
		var _0xaab0x16 = new BigInteger(_0xaab0x11.toString(10));
		var _0xaab0x17 = _0xaab0x14.multiply(_0xaab0x15).multiply(_0xaab0x16);
		var _0xaab0x18 = _0xaab0x17.toString(16);
		while (_0xaab0x18.toString().length < 32) {
			_0xaab0x18 = _0xaab0x18 + Math.floor(Math.random() * 16).toString(16)
		}
		;
		return _0xaab0x18
	}
	function _0xaab0x19(_0xaab0x1a) {
		var _0xaab0x1b = _0xaab0x3f(_0xaab0x1a);
		var _0xaab0x4 = new BigInteger(_0xaab0x2);
		var _0xaab0x1c = _0xaab0x1b.multiply(_0xaab0x4);
		var _0xaab0x1d = _0xaab0x1c.getX().toBigInteger().toString();
		var _0xaab0x1e = _0xaab0x1d.substring(0, 16);
		return _0xaab0x1e
	}
	var _0xaab0x1f = _0xaab0x19.memoize();
	function _0xaab0x20(_0xaab0x21) {
		var _0xaab0x22 = getSECCurveByName(_0xaab0x21);
		_0xaab0x3 = _0xaab0x22.getCurve().getQ().toString();
		_0xaab0x4 = _0xaab0x22.getCurve().getA().toBigInteger().toString();
		_0xaab0x5 = _0xaab0x22.getCurve().getB().toBigInteger().toString();
		_0xaab0x6 = _0xaab0x22.getG().getX().toBigInteger().toString();
		_0xaab0x7 = _0xaab0x22.getG().getY().toBigInteger().toString();
		_0xaab0x8 = _0xaab0x22.getN().toString();
		_0xaab0x2 = ''
	}
	function _0xaab0x23(_0xaab0x24) {
		var _0xaab0x25 = [];
		for (var _0xaab0x26 = 0; _0xaab0x26 < _0xaab0x24.length; ++_0xaab0x26) {
			_0xaab0x25.push(_0xaab0x24.charCodeAt(_0xaab0x26))
		}
		;
		return _0xaab0x25
	}
	function _0xaab0x27(_0xaab0x28) {
		return Array.from(_0xaab0x28, function (_0xaab0x29) {
			return ('0' + (_0xaab0x29 & 255).toString(16)).slice(-2)
		}).join('')
	}
	this.init = function () {
		_0xaab0x20(secp128r1);
		var _0xaab0x2a = _0xaab0x2e();
		_0xaab0x2 = _0xaab0x2a.toString();
		return _0xaab0x32()
	};
	function _0xaab0x2b() {
		return new ECCurveFp(new BigInteger(_0xaab0x3), new BigInteger(_0xaab0x4), new BigInteger(_0xaab0x5))
	}
	function _0xaab0x2c(_0xaab0x2d) {
		return new ECPointFp(_0xaab0x2d, _0xaab0x2d.fromBigInteger(new BigInteger(_0xaab0x6)), _0xaab0x2d.fromBigInteger(new BigInteger(_0xaab0x7)))
	}
	function _0xaab0x2e() {
		var _0xaab0x2f = new SecureRandom();
		var _0xaab0x30 = new BigInteger(_0xaab0x8);
		var _0xaab0x31 = _0xaab0x30.subtract(BigInteger.ONE);
		var _0xaab0x2a = new BigInteger(_0xaab0x30.bitLength(), _0xaab0x2f);
		return _0xaab0x2a.mod(_0xaab0x31).add(BigInteger.ONE)
	}
	function _0xaab0x32() {
		var _0xaab0x2d = _0xaab0x2b();
		var _0xaab0x33 = _0xaab0x2c(_0xaab0x2d);
		var _0xaab0x4 = new BigInteger(_0xaab0x2);
		var _0xaab0x1b = _0xaab0x33.multiply(_0xaab0x4);
		return _0xaab0x3b(_0xaab0x1b)
	}
	function _0xaab0x34(_0xaab0x35) {
		var _0xaab0x36 = '';
		for (var _0xaab0x26 = _0xaab0x35.length - 1; _0xaab0x26 >= 0; _0xaab0x26--) {
			_0xaab0x36 += _0xaab0x35.substr(_0xaab0x26, 1)
		}
		;
		return _0xaab0x36
	}
	this.exportKey = function (_0xaab0x37) {
		return _0xaab0x41(_0xaab0x37)
	};
	this.encryptToMF = function (_0xaab0x38, _0xaab0x37) {
		return _0xaab0x48(_0xaab0x38, true, _0xaab0x37)
	};
	this.encryptToApp = function (_0xaab0x38, _0xaab0x37) {
		return _0xaab0x48(_0xaab0x38, false, _0xaab0x37)
	};
	this.encryptToDLB = function (_0xaab0x38, _0xaab0x37) {
		var _0xaab0x39 = _0xaab0x48(_0xaab0x38, false, _0xaab0x37);
		var _0xaab0x3a = _0xaab0x4a(_0xaab0x39.toString());
		return _0xaab0x3a
	};
	function _0xaab0x3b(_0xaab0x1b) {
		var _0xaab0x3c = _0xaab0x1b.getX().toBigInteger().toString(16);
		var _0xaab0x3d = _0xaab0x1b.getY().toBigInteger().toString(16);
		var _0xaab0x2d = _0xaab0x2b();
		var _0xaab0x3e = _0xaab0x2d.getQ().toString(16).length;
		if (_0xaab0x3e % 2 != 0) {
			_0xaab0x3e++
		}
		;
		while (_0xaab0x3c.length < _0xaab0x3e) {
			_0xaab0x3c = '0' + _0xaab0x3c
		}
		;
		while (_0xaab0x3d.length < _0xaab0x3e) {
			_0xaab0x3d = '0' + _0xaab0x3d
		}
		;
		return '04' + _0xaab0x3c + _0xaab0x3d
	}
	function _0xaab0x3f(_0xaab0x35) {
		switch (parseInt(_0xaab0x35.substr(0, 2), 16)) {
		case 0:
			return this.infinity;
		case 2:
			;
		case 3:
			return null;
		case 4:
			;
		case 6:
			;
		case 7:
			var _0xaab0x40 = (_0xaab0x35.length - 2) / 2;
			var _0xaab0x3c = _0xaab0x35.substr(2, _0xaab0x40);
			var _0xaab0x3d = _0xaab0x35.substr(_0xaab0x40 + 2, _0xaab0x40);
			var _0xaab0x2d = _0xaab0x2b();
			return new ECPointFp(_0xaab0x2d, _0xaab0x2d.fromBigInteger(new BigInteger(_0xaab0x3c, 16)), _0xaab0x2d.fromBigInteger(new BigInteger(_0xaab0x3d, 16)));
		default:
			return null
		}
	}
	function _0xaab0x41(_0xaab0x37) {
		var _0xaab0x1e = _0xaab0x1f(_0xaab0x37);
		var _0xaab0x42 = CryptoJS.enc.Latin1.parse(_0xaab0x1e);
		var _0xaab0x43 = _0xaab0x27(_0xaab0x23(_0xaab0x1e));
		var _0xaab0x44 = CryptoJS.AES.encrypt(_0xaab0x43, _0xaab0x42, {
			iv: _0xaab0x9,
			padding: CryptoJS.pad.Pkcs7,
			mode: CryptoJS.mode.CBC
		});
		return _0xaab0x44.toString()
	}
	function _0xaab0x45(_0xaab0x46, _0xaab0x47, _0xaab0x37) {
		var _0xaab0x1e = _0xaab0x1f(_0xaab0x37);
		if (_0xaab0x47) {
			_0xaab0x1e = _0xaab0x34(_0xaab0x1e)
		}
		;
		var _0xaab0x42 = CryptoJS.enc.Latin1.parse(_0xaab0x1e);
		var _0xaab0x44 = CryptoJS.AES.encrypt(_0xaab0x46, _0xaab0x42, {
			iv: _0xaab0x9,
			padding: CryptoJS.pad.Pkcs7,
			mode: CryptoJS.mode.CBC
		});
		return _0xaab0x44.toString()
	}
	function _0xaab0x48(_0xaab0x46, _0xaab0x47, _0xaab0x37) {
		var _0xaab0x1e = _0xaab0x1f(_0xaab0x37);
		if (_0xaab0x47) {
			_0xaab0x1e = _0xaab0x34(_0xaab0x1e)
		}
		;
		var _0xaab0x42 = CryptoJS.enc.Latin1.parse(_0xaab0x1e);
		var _0xaab0x18 = _0xaab0x10();
		var _0xaab0x49 = CryptoJS.enc.Hex.parse(_0xaab0x18.toString());
		var _0xaab0x44 = CryptoJS.AES.encrypt(_0xaab0x46, _0xaab0x42, {
			iv: _0xaab0x49,
			padding: CryptoJS.pad.Pkcs7,
			mode: CryptoJS.mode.CBC
		});
		return _0xaab0xc + \\ + CryptoJS.enc.Base64.stringify(_0xaab0x49) + \\ + _0xaab0x44.toString()
	}
	function _0xaab0x4a(_0xaab0x4b) {
		var _0xaab0x4c = new RSAKey();
		_0xaab0x4c.setPublic(_0xaab0xa, _0xaab0xb);
		var _0xaab0x39 = _0xaab0x4c.encrypt(_0xaab0x4b);
		return CryptoJS.enc.Base64.stringify(CryptoJS.enc.Hex.parse(_0xaab0x39))
	}
	function _0xaab0x4d(_0xaab0x4e) {
		var _0xaab0x3a = '';
		for (var _0xaab0x26 = 0; _0xaab0x26 < _0xaab0x4e.length; _0xaab0x26++) {
			_0xaab0x3a += String.fromCharCode(255 ^ _0xaab0x4e.charCodeAt(_0xaab0x26))
		}
		;
		return _0xaab0x3a
	}
	this.decryptFromApp = function _0xaab0x4f(_0xaab0x50, _0xaab0x37) {
		var _0xaab0x1e = _0xaab0x1f(_0xaab0x37);
		_0xaab0x1e = _0xaab0x4d(_0xaab0x1e);
		var _0xaab0x42 = CryptoJS.enc.Latin1.parse(_0xaab0x1e);
		var _0xaab0x51 = CryptoJS.lib.CipherParams.create({ ciphertext: CryptoJS.enc.Base64.parse(_0xaab0x50) });
		var _0xaab0x52 = CryptoJS.AES.decrypt(_0xaab0x51, _0xaab0x42, { iv: _0xaab0x9 });
		return _0xaab0x52.toString(CryptoJS.enc.Utf8)
	};
	this.decryptFromMF = function _0xaab0x4f(_0xaab0x50, _0xaab0x37) {
		var _0xaab0x1e = _0xaab0x1f(_0xaab0x37);
		_0xaab0x1e = _0xaab0x34(_0xaab0x1e);
		var _0xaab0x42 = CryptoJS.enc.Latin1.parse(_0xaab0x1e);
		var _0xaab0x51 = CryptoJS.lib.CipherParams.create({ ciphertext: CryptoJS.enc.Base64.parse(_0xaab0x50) });
		var _0xaab0x52 = CryptoJS.AES.decrypt(_0xaab0x51, _0xaab0x42, { iv: _0xaab0x9 });
		return _0xaab0x52.toString(CryptoJS.enc.Utf8)
	};
	function _0xaab0x53(_0xaab0x54) {
		return _0xaab0x54.replace(/^\s+|\s+$/gm, '')
	}
	function _0xaab0x55(_0xaab0x25) {
		for (var _0xaab0x56 = [], _0xaab0x26 = 0; _0xaab0x26 < _0xaab0x25.length; _0xaab0x26++) {
			_0xaab0x56.push((_0xaab0x25[_0xaab0x26] >>> 4).toString(16));
			_0xaab0x56.push((_0xaab0x25[_0xaab0x26] & 15).toString(16))
		}
		;
		return _0xaab0x56.join('')
	}
	function _0xaab0x57(_0xaab0x56) {
		for (var _0xaab0x25 = [], _0xaab0x22 = 0; _0xaab0x22 < _0xaab0x56.length; _0xaab0x22 += 2) {
			_0xaab0x25.push(parseInt(_0xaab0x56.substr(_0xaab0x22, 2), 16))
		}
		;
		return _0xaab0x25
	}
    // 66 - encryptHashPassword
	this.encryptHashPassword = function _0xaab0x58(_0xaab0x1e, _0xaab0x59, _0xaab0x5a) {
		if (_0xaab0x1e == null || _0xaab0x1e.trim().length == 0) {
			alert('password is empty');
			return null
		}
		;
		if (_0xaab0x59 == null || _0xaab0x59.trim().length == 0) {
			alert('salt is empty');
			return null
		}
		;
		var _0xaab0x35 = _0xaab0x53(_0xaab0x59.toUpperCase());
		var _0xaab0x5b = CryptoJS.SHA1(CryptoJS.enc.Latin1.parse(_0xaab0x35)).toString().toUpperCase();
		var _0xaab0x5c = _0xaab0x1e + _0xaab0x5b;
		var _0xaab0x5d = '01' + CryptoJS.enc.Base64.stringify(CryptoJS.SHA256(_0xaab0x5c));
		return _0xaab0x48(_0xaab0x5d, false, _0xaab0x5a)
	};
	this.sign = function _0xaab0x5e(_0xaab0x5c, _0xaab0x5a) {
		if (_0xaab0x5c == null || _0xaab0x5a == 0) {
			return null
		}
		;
		var _0xaab0x35 = _0xaab0x53(_0xaab0x5c);
		var _0xaab0x5b = CryptoJS.SHA256(_0xaab0x35);
		return _0xaab0x45(_0xaab0x5b, false, _0xaab0x5a)
	};
	this.getVersion = function _0xaab0x5f() {
		return '8.2'
	}
};
window.DLECC = new DLECC()